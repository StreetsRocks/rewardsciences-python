# -*- coding: utf-8 -*-

"""
    rewardsciencesapilib.controllers.rewards

    This file was automatically generated by APIMATIC BETA v2.0 on 09/13/2016
"""

from .base_controller import *



class Rewards(BaseController):

    """A Controller to access Endpoints in the rewardsciencesapilib API."""

    def __init__(self, http_client = None, http_call_back = None):
        """Constructor which allows a different HTTP client for this controller."""
        BaseController.__init__(self, http_client, http_call_back)

    def redeem(self,
                reward_id,
                user_id):
        """Does a POST request to /rewards/{reward_id}/redemptions.

        Redeem a reward.

        Args:
            reward_id (int): The ID of the reward to be redeemed.
            user_id (int): The ID of the user who is redeeming the reward.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        if reward_id == None:
            raise ValueError("Required parameter 'reward_id' cannot be None.")
        elif user_id == None:
            raise ValueError("Required parameter 'user_id' cannot be None.")

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/rewards/{reward_id}/redemptions'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'reward_id': reward_id
        })

        # Process optional query parameters
        _query_parameters = {
            'user_id': user_id
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'Accept': Configuration.accept,
            'Content-Type': Configuration.content_type,
            'Authorization': 'Bearer ' + Configuration.o_auth_access_token
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body)



    def show(self,
                reward_id):
        """Does a GET request to /rewards/{reward_id}.

        Show a reward's details.

        Args:
            reward_id (int): The ID of the reward to be retrieved.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        if reward_id == None:
            raise ValueError("Required parameter 'reward_id' cannot be None.")

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/rewards/{reward_id}'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'reward_id': reward_id
        })
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'Accept': Configuration.accept,
            'Content-Type': Configuration.content_type,
            'Authorization': 'Bearer ' + Configuration.o_auth_access_token
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body)



    def bid(self,
                reward_id,
                user_id,
                amount):
        """Does a POST request to /rewards/{reward_id}/bids.

        Bid on a reward auction.

        Args:
            reward_id (int): The ID of the reward auction to be bid on.
            user_id (int): The ID of the user who is bidding on the reward
                auction.
            amount (string): Can be either 'max' (when max bidding) or the
                number of points the user wants to bid.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Validate required parameters
        if reward_id == None:
            raise ValueError("Required parameter 'reward_id' cannot be None.")
        elif user_id == None:
            raise ValueError("Required parameter 'user_id' cannot be None.")
        elif amount == None:
            raise ValueError("Required parameter 'amount' cannot be None.")

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/rewards/{reward_id}/bids'

        # Process optional template parameters
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'reward_id': reward_id
        })

        # Process optional query parameters
        _query_parameters = {
            'user_id': user_id,
            'amount': amount
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'Accept': Configuration.accept,
            'Content-Type': Configuration.content_type,
            'Authorization': 'Bearer ' + Configuration.o_auth_access_token
        }

        # Prepare the API call.
        _request = self.http_client.post(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body)



    def list(self,
                category_id = None,
                limit = 25,
                offset = 0):
        """Does a GET request to /rewards.

        List all the available rewards.

        Args:
            category_id (int, optional): The id of the category to filter
                rewards by
            limit (int, optional): The number of rewards you want to be
                retrieved.
            offset (int, optional): The number of rewards you want to skip
                before starting the retrieval.

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # The base uri for api requests
        _query_builder = Configuration.BASE_URI
 
        # Prepare query string for API call
        _query_builder += '/rewards'

        # Process optional query parameters
        _query_parameters = {
            'category_id': category_id,
            'limit': limit,
            'offset': offset
        }
        
        # Validate and preprocess url
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'user-agent': 'APIMATIC 2.0',
            'Accept': Configuration.accept,
            'Content-Type': Configuration.content_type,
            'Authorization': 'Bearer ' + Configuration.o_auth_access_token
        }

        # Prepare the API call.
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)

        # Invoke the on before request HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_before_request(_request)

        # Invoke the API call  to fetch the response.
        _response = self.http_client.execute_as_string(_request)

        # Wrap the request and the response in an HttpContext object
        _context = HttpContext(_request, _response)

        # Invoke the on after response HttpCallBack if specified
        if self.http_call_back != None:
            self.http_call_back.on_after_response(_context)

        # Global error handling using HTTP status codes.
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_response.raw_body)


